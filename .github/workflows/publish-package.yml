name: Publish Packages

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # build-and-deploy:
    # runs-on: ubuntu-latest
    # timeout-minutes: 15
    # env:
    #   GBP_PACKAGE_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
    #   FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}
    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v4
      
    #   - name: Setup Node.js environment
    #     uses: actions/setup-node@v4
    #     with:
    #       node-version: '20'
    #       cache: 'yarn'
    #       cache-dependency-path: '**/yarn.lock'
      
    #   - name: Install dependencies
    #     run: yarn install --frozen-lockfile
        
    #   - name: Verify Yarn configuration
    #     run: |
    #       echo "Verificando configuración de Yarn y variables de entorno..."
    #       yarn config list
    #       # No imprime los tokens por seguridad
    #       if [ -z "$GBP_PACKAGE_TOKEN" ]; then echo "⚠️ GBP_PACKAGE_TOKEN no está configurado"; else echo "✓ GBP_PACKAGE_TOKEN configurado"; fi
    #       if [ -z "$FONT_AWESOME_TOKEN" ]; then echo "⚠️ FONT_AWESOME_TOKEN no está configurado"; else echo "✓ FONT_AWESOME_TOKEN configurado"; fi
      
    #   - name: Build Storybook
    #     id: build
    #     run: yarn build-storybook
        
    #   - name: Check build output
    #     run: |
    #       if [ ! -d "./storybook-static" ]; then
    #         echo "::error::La carpeta de build no existe"
    #         exit 1
    #       fi
      
    #   - name: Create .nojekyll file
    #     run: touch ./storybook-static/.nojekyll
      
    #   - name: Deploy to GitHub Pages
    #     uses: peaceiris/actions-gh-pages@v3
    #     with:
    #       github_token: ${{ secrets.GITHUB_TOKEN }}
    #       publish_dir: ./storybook-static
    #       force_orphan: true
    #       publish_branch: gh-pages
          
    #   - name: Notify success
    #     if: success()
    #     run: echo "✅ Storybook desplegado exitosamente en https://flash-global66.github.io/b2b-ui-framework/"
        
    #   - name: Notify failure
    #     if: failure()
    #     run: echo "❌ Falló el despliegue de Storybook"

  # publish:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 20
  #   permissions:
  #     contents: write
  #     packages: write
  #   env:
  #     GBP_PACKAGE_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
  #     FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.GBP_PACKAGE_TOKEN }}

  #     - name: Setup Node.js 20
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.x
  #         cache: 'yarn'
  #         cache-dependency-path: '**/yarn.lock'

  #     - name: Verify environment variables
  #       run: |
  #         if [ -z "$GBP_PACKAGE_TOKEN" ]; then 
  #           echo "::error::GBP_PACKAGE_TOKEN no está configurado"
  #           exit 1
  #         fi
  #         if [ -z "$FONT_AWESOME_TOKEN" ]; then 
  #           echo "::error::FONT_AWESOME_TOKEN no está configurado"
  #           exit 1
  #         fi
  #         echo "✅ Variables de entorno configuradas correctamente"

  #     - name: Setup authentication for publishing
  #       run: |
  #         echo "//npm.pkg.github.com/:_authToken=${GBP_PACKAGE_TOKEN}" > .npmrc
  #         echo "@flash-global66:registry=https://npm.pkg.github.com/" >> .npmrc
  #         echo "//npm.fontawesome.com/:_authToken=${FONT_AWESOME_TOKEN}" >> .npmrc
  #         echo "@fortawesome:registry=https://npm.fontawesome.com/" >> .npmrc

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Check existing tags
  #       id: check-tags
  #       run: |
  #         git fetch --tags
  #         echo "LOCAL_TAGS=$(git tag --list | jq -R -s -c 'split("\n")')" >> $GITHUB_OUTPUT

  #     - name: Version packages with Lerna
  #       id: version
  #       env:
  #         GIT_AUTHOR_NAME: GitHub Actions
  #         GIT_AUTHOR_EMAIL: actions@github.com
  #         GIT_COMMITTER_NAME: GitHub Actions
  #         GIT_COMMITTER_EMAIL: actions@github.com
  #         GH_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
  #       run: |
  #         export GIT_CURL_VERBOSE=1
  #         export GIT_TRACE=1
          
  #         echo "Estado de Git antes de ejecutar lerna:"
  #         # git status
          
  #         OUTPUT=$(yarn lerna version --conventional-commits --yes --tag-version-prefix="" --create-release=github --message "chore(release): publish %s [skip ci]" --loglevel=debug 2>&1)
  #         EXIT_CODE=$?
          
  #         echo "SALIDA COMPLETA DE LERNA:"
  #         echo "$OUTPUT"
          
  #         if [ $EXIT_CODE -ne 0 ]; then
  #           if echo "$OUTPUT" | grep -q "No changed packages to publish"; then
  #             echo "no_changes=true" >> $GITHUB_OUTPUT
  #             echo "ℹ️ No hay cambios para publicar"
  #           else
  #             echo "::error::Falló el proceso de versionado con código $EXIT_CODE"
  #             exit $EXIT_CODE
  #           fi
  #         else
  #           echo "no_changes=false" >> $GITHUB_OUTPUT
  #           echo "✅ Versionado completado, hay cambios para publicar"
  #         fi

  #     - name: Publish packages with Lerna
  #       if: steps.version.outputs.no_changes == 'false'
  #       run: npx lerna publish from-package --yes

  #     - name: Push version changes and tags to main
  #       if: steps.version.outputs.no_changes == 'false'
  #       run: |
  #         git config --global user.name "GitHub Actions"
  #         git config --global user.email "actions@github.com"
  #         git remote set-url origin "https://x-access-token:${{ secrets.GBP_PACKAGE_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
  #         git push origin main --follow-tags

  #     - name: Cleanup temporary files
  #       if: always()
  #       run: rm -f .npmrc

  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      packages: write
    env:
      GBP_PACKAGE_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
      FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GBP_PACKAGE_TOKEN }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Enable Corepack and Install Yarn 4.7.0  # ← Nuevo paso
        run: |
          corepack enable
          corepack prepare yarn@4.7.0 --activate

      - name: Verify environment variables
        run: |
          if [ -z "$GBP_PACKAGE_TOKEN" ]; then 
            echo "::error::GBP_PACKAGE_TOKEN no está configurado"
            exit 1
          fi
          if [ -z "$FONT_AWESOME_TOKEN" ]; then 
            echo "::error::FONT_AWESOME_TOKEN no está configurado"
            exit 1
          fi
          echo "✅ Variables de entorno configuradas correctamente"

      - name: Install dependencies
        run: yarn install

      # - name: Debug - List latest commits and tags
      #   run: |
      #     git fetch --tags
      #     git log --oneline -n 5
      #     git tag -l | tail -5

      # - name: Debug - Show changes since last release
      #   run: |
      #     LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
      #     echo "Cambios desde el último tag ($LATEST_TAG):"
      #     git diff --name-only $LATEST_TAG HEAD

      - name: Version packages with Lerna
        id: version
        env:
          GIT_AUTHOR_NAME: GitHub Actions
          GIT_AUTHOR_EMAIL: actions@github.com
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com
          GH_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
        run: |
          export GIT_CURL_VERBOSE=1
          export GIT_TRACE=1
          
          # Forzar detección de cambios (sin arrojar error si no hay cambios)
          CHANGED_PACKAGES=$(yarn lerna changed -a 2>&1) || true
          
          # Verificar si hay paquetes cambiados
          if echo "$CHANGED_PACKAGES" | grep -q "No changed packages"; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "ℹ️ No hay cambios para publicar"
            exit 0
          fi
          
          echo "Paquetes con cambios detectados:"
          echo "$CHANGED_PACKAGES"

          # Ejecutar Lerna con formato de etiqueta simplificado
          yarn lerna version --conventional-commits \
            --conventional-graduate \
            --yes \
            --tag-version-prefix="" \
            --loglevel=debug
          
          # Capturar el código de salida
          EXIT_CODE=$?
          
          # Procesar el resultado
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Falló el proceso de versionado con código $EXIT_CODE"
            exit $EXIT_CODE
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "✅ Versionado completado, hay cambios para publicar"
          fi
          
      - name: Setup authentication for publishing
        run: |
          echo "//npm.pkg.github.com/:_authToken=${GBP_PACKAGE_TOKEN}" > .npmrc
          echo "@flash-global66:registry=https://npm.pkg.github.com/" >> .npmrc
          echo "//npm.fontawesome.com/:_authToken=${FONT_AWESOME_TOKEN}" >> .npmrc
          echo "@fortawesome:registry=https://npm.fontawesome.com/" >> .npmrc

      - name: Publish packages with Lerna
        if: steps.version.outputs.no_changes == 'false'
        run: npx lerna publish from-package --yes --tag-version-prefix=""
        

      - name: Cleanup temporary files
        if: always()
        run: rm -f .npmrc
