name: Publish Packages

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      packages: write
    env:
      GBP_PACKAGE_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
      FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Enable Corepack and Install Yarn 4.7.0
        run: |
          corepack enable
          corepack prepare yarn@4.7.0 --activate

      - name: Verify environment variables
        run: |
          if [ -z "$GBP_PACKAGE_TOKEN" ]; then 
            echo "::error::GBP_PACKAGE_TOKEN no está configurado"
            exit 1
          fi
          if [ -z "$FONT_AWESOME_TOKEN" ]; then 
            echo "::error::FONT_AWESOME_TOKEN no está configurado"
            exit 1
          fi
          echo "✅ Variables de entorno configuradas correctamente"

      - name: Install dependencies
        run: yarn install

      - name: Detect changed packages
        id: detect-changes
        run: |
          # Componentes prioritarios
          ORDERED_COMPONENTS=("form" "icon-font" "button")
          echo "PRIORITY_COMPONENTS=${ORDERED_COMPONENTS[*]}" >> $GITHUB_OUTPUT
          
          # Detectar componentes con cambios usando lerna
          CHANGED_OUTPUT=$(yarn lerna changed --json 2>/dev/null || echo "[]")
          
          # Extraer solo los nombres de los paquetes cambiados
          CHANGED_PACKAGES=$(echo "$CHANGED_OUTPUT" | jq -r 'if type == "array" then map(.name | split("/") | last) | join(" ") else "" end')
          
          # Verificar si hay cambios
          if [ -z "$CHANGED_PACKAGES" ]; then
            echo "NO_CHANGES=true" >> $GITHUB_OUTPUT
            echo "No se detectaron cambios en ningún componente."
          else
            echo "NO_CHANGES=false" >> $GITHUB_OUTPUT
            echo "CHANGED_PACKAGES=$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
            echo "Componentes con cambios detectados: $CHANGED_PACKAGES"
          fi

      - name: Build components
        if: steps.detect-changes.outputs.NO_CHANGES != 'true'
        run: |
          echo "Iniciando proceso de construcción de componentes"
          
          # Obtener los componentes prioritarios
          IFS=' ' read -r -a PRIORITY_COMPONENTS <<< "${{ steps.detect-changes.outputs.PRIORITY_COMPONENTS }}"
          
          # Obtener los componentes con cambios
          IFS=' ' read -r -a CHANGED_COMPONENTS <<< "${{ steps.detect-changes.outputs.CHANGED_PACKAGES }}"
          
          # Crear un array para los componentes a construir
          COMPONENTS_TO_BUILD=()
          
          # Verificar si hay componentes con cambios
          if [ ${#CHANGED_COMPONENTS[@]} -gt 0 ]; then
            echo "Se detectaron cambios en componentes. Construyendo componentes prioritarios primero."
            
            # Añadir todos los componentes prioritarios al inicio
            for component in "${PRIORITY_COMPONENTS[@]}"; do
              COMPONENTS_TO_BUILD+=("$component")
            done
            
            # Añadir componentes con cambios que no son prioritarios
            for component in "${CHANGED_COMPONENTS[@]}"; do
              # Verificar si el componente ya está en la lista (es prioritario)
              if [[ ! " ${PRIORITY_COMPONENTS[*]} " =~ " $component " ]]; then
                COMPONENTS_TO_BUILD+=("$component")
              fi
            done
            
            echo "Componentes a construir: ${COMPONENTS_TO_BUILD[*]}"
            
            # Construir los componentes
            for component in "${COMPONENTS_TO_BUILD[@]}"; do
              if [ -d "components/$component" ]; then
                echo "Building @flash-global66/$component"
                yarn build $component
                
                # Verificar si la construcción fue exitosa
                if [ $? -ne 0 ]; then
                  echo "Error building $component"
                  exit 1
                fi
              else
                echo "Advertencia: El componente $component no existe en el directorio components/"
              fi
            done
            
            echo "Todos los componentes necesarios fueron construidos exitosamente"
          else
            echo "No se detectaron cambios en componentes. No se realizará ninguna construcción."
          fi

      - name: Check existing tags
        if: steps.detect-changes.outputs.NO_CHANGES != 'true'
        id: check-tags
        run: |
          git fetch --tags
          echo "LOCAL_TAGS=$(git tag --list | jq -R -s -c 'split("\n")')" >> $GITHUB_OUTPUT
          echo "✅ Tags existentes verificados"

      - name: discard yarn.lock
        run: git checkout -- yarn.lock

      - name: Version packages with Lerna
        if: steps.detect-changes.outputs.NO_CHANGES != 'true'
        id: version
        env:
          GIT_AUTHOR_NAME: GitHub Actions
          GIT_AUTHOR_EMAIL: actions@github.com
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com
        run: |
          # Ejecutar Lerna con formato de etiqueta simplificado
          yarn lerna version --conventional-commits \
            --no-granular-pathspec \
            --yes \
            --tag-version-prefix="" \
            --loglevel=debug
          
          # Capturar el código de salida
          EXIT_CODE=$?
          
          # Procesar el resultado
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Falló el proceso de versionado con código $EXIT_CODE"
            exit $EXIT_CODE
          else
            echo "✅ Versionado completado, hay cambios para publicar"
          fi

      - name: Setup authentication for publishing
        if: steps.detect-changes.outputs.NO_CHANGES != 'true'
        run: |
          echo "//npm.pkg.github.com/:_authToken=${GBP_PACKAGE_TOKEN}" > .npmrc
          echo "@flash-global66:registry=https://npm.pkg.github.com/" >> .npmrc
          echo "//npm.fontawesome.com/:_authToken=${FONT_AWESOME_TOKEN}" >> .npmrc
          echo "@fortawesome:registry=https://npm.fontawesome.com/" >> .npmrc

      - name: Publish packages with Lerna
        if: steps.detect-changes.outputs.NO_CHANGES != 'true'
        run: npx lerna publish from-package --yes --tag-version-prefix=""

      - name: Cleanup temporary files
        if: always()
        run: rm -f .npmrc

  deploy-github-pages:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      GBP_PACKAGE_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
      FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack and Install Yarn 4.7.0
        run: |
          corepack enable
          corepack prepare yarn@4.7.0 --activate
      
      - name: Verify environment variables
        run: |
          if [ -z "$GBP_PACKAGE_TOKEN" ]; then 
            echo "::error::GBP_PACKAGE_TOKEN no está configurado"
            exit 1
          fi
          if [ -z "$FONT_AWESOME_TOKEN" ]; then 
            echo "::error::FONT_AWESOME_TOKEN no está configurado"
            exit 1
          fi
          echo "✅ Variables de entorno configuradas correctamente"

      - name: Install dependencies
        run: yarn install

      - name: Build Storybook
        id: build
        run: yarn build-storybook
        
      - name: Check build output
        run: |
          if [ ! -d "./storybook-static" ]; then
            echo "::error::La carpeta de build no existe"
            exit 1
          fi

      - name: Create .nojekyll file
        run: touch ./storybook-static/.nojekyll

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          force_orphan: true
          publish_branch: gh-pages

      - name: Notify success
        if: success()
        run: echo "✅ Storybook desplegado exitosamente en https://flash-global66.github.io/global66-design-system/"

      - name: Notify failure
        if: failure()
        run: echo "❌ Falló el despliegue de Storybook"