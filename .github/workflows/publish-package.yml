name: Publish Packages

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      components_built: ${{ steps.build.outputs.success }}
      cache_key: ${{ steps.cache-key.outputs.key }}
    env:
      GBP_PACKAGE_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
      FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=node-modules-${{ hashFiles('**/yarn.lock') }}" >> $GITHUB_OUTPUT

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Enable Corepack and Install Yarn 4.7.0
        run: |
          corepack enable
          corepack prepare yarn@4.7.0 --activate

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .yarn/cache
            .yarn/unplugged
            .yarn/install-state.gz
            */*/node_modules
          key: ${{ steps.cache-key.outputs.key }}

      - name: Verify environment variables
        run: |
          if [ -z "$GBP_PACKAGE_TOKEN" ]; then 
            echo "::error::GBP_PACKAGE_TOKEN no está configurado"
            exit 1
          fi
          if [ -z "$FONT_AWESOME_TOKEN" ]; then 
            echo "::error::FONT_AWESOME_TOKEN no está configurado"
            exit 1
          fi
          echo "✅ Variables de entorno configuradas correctamente"

      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install

      - name: Create building of components
        id: build
        run: |
          echo "Building packages in specific order"

          ORDERED_COMPONENTS=("form" "icon-font" "button")

          for component in "${ORDERED_COMPONENTS[@]}"; do
            echo "Building @flash-global66/$component"
            yarn build $component
            
            # Verificar si la construcción fue exitosa
            if [ $? -ne 0 ]; then
              echo "Error building $component"
              exit 1
            fi
          done

          echo "Build remaining packages"

          ALL_COMPONENTS=$(find components -maxdepth 1 -mindepth 1 -type d -exec basename {} \;)

          for component in $ALL_COMPONENTS; do
            # Verificar si el componente ya fue construido
            if [[ ! " ${ORDERED_COMPONENTS[@]} " =~ " $component " ]] && [[ ! " ${ORDERED_COMPONENTS[@]} " =~ " g-$component " ]]; then
              echo "Building @flash-global66/$component"
              yarn build $component
            fi
          done

          echo "All components built successfully"
          echo "success=true" >> $GITHUB_OUTPUT

  publish:
    needs: setup-and-build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      packages: write
    env:
      GBP_PACKAGE_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
      FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Enable Corepack and Install Yarn 4.7.0
        run: |
          corepack enable
          corepack prepare yarn@4.7.0 --activate

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .yarn/cache
            .yarn/unplugged
            .yarn/install-state.gz
            */*/node_modules
          key: ${{ needs.setup-and-build.outputs.cache_key }}

      - name: Check existing tags
        id: check-tags
        run: |
          git fetch --tags
          echo "LOCAL_TAGS=$(git tag --list | jq -R -s -c 'split("\n")')" >> $GITHUB_OUTPUT
          echo "✅ Tags existentes verificados"

      - name: Version packages with Lerna
        id: version
        env:
          GIT_AUTHOR_NAME: GitHub Actions
          GIT_AUTHOR_EMAIL: actions@github.com
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com
        run: |
          # Forzar detección de cambios (sin arrojar error si no hay cambios)
          CHANGED_PACKAGES=$(yarn lerna changed -a 2>&1) || true
          
          # Verificar si hay paquetes cambiados
          if echo "$CHANGED_PACKAGES" | grep -q "No changed packages"; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "ℹ️ No hay cambios para publicar"
            exit 0
          fi
          
          echo "Paquetes con cambios detectados:"
          echo "$CHANGED_PACKAGES"

          # Ejecutar Lerna con formato de etiqueta simplificado
          yarn lerna version --conventional-commits \
            --no-granular-pathspec \
            --yes \
            --tag-version-prefix="" \
            --loglevel=debug
          
          # Capturar el código de salida
          EXIT_CODE=$?
          
          # Procesar el resultado
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Falló el proceso de versionado con código $EXIT_CODE"
            exit $EXIT_CODE
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "✅ Versionado completado, hay cambios para publicar"
          fi

      - name: Setup authentication for publishing
        run: |
          echo "//npm.pkg.github.com/:_authToken=${GBP_PACKAGE_TOKEN}" > .npmrc
          echo "@flash-global66:registry=https://npm.pkg.github.com/" >> .npmrc
          echo "//npm.fontawesome.com/:_authToken=${FONT_AWESOME_TOKEN}" >> .npmrc
          echo "@fortawesome:registry=https://npm.fontawesome.com/" >> .npmrc

      - name: Publish packages with Lerna
        if: steps.version.outputs.no_changes == 'false'
        run: npx lerna publish from-package --yes --tag-version-prefix=""

      - name: Cleanup temporary files
        if: always()
        run: rm -f .npmrc

  deploy-github-pages:
    needs: setup-and-build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      GBP_PACKAGE_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
      FONT_AWESOME_TOKEN: ${{ secrets.FONT_AWESOME_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Enable Corepack and Install Yarn 4.7.0
        run: |
          corepack enable
          corepack prepare yarn@4.7.0 --activate
      
      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .yarn/cache
            .yarn/unplugged
            .yarn/install-state.gz
            */*/node_modules
          key: ${{ needs.setup-and-build.outputs.cache_key }}

      - name: Build Storybook
        id: build
        run: yarn build-storybook
        
      - name: Check build output
        run: |
          if [ ! -d "./storybook-static" ]; then
            echo "::error::La carpeta de build no existe"
            exit 1
          fi

      - name: Create .nojekyll file
        run: touch ./storybook-static/.nojekyll

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          force_orphan: true
          publish_branch: gh-pages

      - name: Notify success
        if: success()
        run: echo "✅ Storybook desplegado exitosamente en https://flash-global66.github.io/global66-design-system/"

      - name: Notify failure
        if: failure()
        run: echo "❌ Falló el despliegue de Storybook"
